#include<stdio.h>
#include<stdlib.h>
struct node 
{
	int data;
	struct node * link;
};

struct node * head1=NULL;
struct node * head2=NULL;
void append1();
void append2();
void display();
int count();
struct node * concatenate (struct node *,struct node *);

void main()
{	
	int ch;
	while(1)
	{
		printf("Link list operations\n");
		printf("1.Append1\n2.Append2\n3.Display\n4.Count\n5.Concatinate\n6.Quit\n");
		printf("Enter your choice\n");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1 : append1();break;
			case 2 : append2();break;
			case 3 : display();break;
			case 4 : count();break;
			case 5 : concatenate (head1,head2);break;
			case 6 : exit(1);
			default : printf("Enter a valid input !!!");
		}
	}
}

void append1()
{
	int n;
	printf("Enter the no to be appended\n");
	scanf("%d",&n);
	struct node * temp;
	temp = (struct node *)malloc(sizeof (struct node));
	printf("Enter node data\n");
	scanf("%d",&temp->data);
	temp->link=NULL;
	if (head1==NULL)
	{
		head1=temp;	
	}
	
	else
	{
		struct node * p;
		p=head1;
		while(p->link!=NULL)
		{
			p=p->link;		
		}	
		p->link=temp;
	}
}

void append2()
{
	int n;
	printf("Enter the no to be appended\n");
	scanf("%d",&n);
	struct node * temp;
	temp = (struct node *)malloc(sizeof (struct node));
	printf("Enter node data\n");
	scanf("%d",&temp->data);
	temp->link=NULL;
	if (head2==NULL)
	{
		head2=temp;	
	}
	
	else
	{
		struct node * p;
		p=head2;
		while(p->link!=NULL)
		{
			p=p->link;		
		}	
		p->link=temp;
	}
}

void display()
{
	struct node * temp;
	temp=head1;
	if (temp==NULL)
	{
		printf("List is empty");	
	}
	else	
	{
		while(temp!=NULL)
		{
			printf("%d",temp->data);
			temp=temp->link;
			printf("\n\n");		
		}	
		
	}

}

int count()
{
	int length=0;
	struct node * temp;
	temp=head1;
	while(temp!=NULL)
	{
		length++;
		temp=temp->link;	
	}
	return length;
}

struct node * concatenate (struct node *head1,struct node *head2)
{
                struct node *p;
                if (head1==NULL)                            
		{
		printf("list is empty\n");
                return (head2);
		}
                else if (head2==NULL)
                {           
		printf("list is empty\n");
                return (head1);
               	}	
                
		p=head1;                             

                while (p->link!=NULL)                 
                {
		p=p->link;
		}

                p->link=head2;                          
                
   return (head1);
		
}
