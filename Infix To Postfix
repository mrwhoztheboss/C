#include<stdio.h>
#include<ctype.h>
#include<string.h>
#define MAX 50

typedef struct stack
  {
    int data[MAX];
    int top;
     }stack;

int precedence(char);
void init(stack *);
int empty(stack*);
int full(stack*);
int pop(stack*);
void push(stack*,int);
int top(stack*);
void infix_to_postfix(char infix[],char postfix[]);
int evaluate(char x,int op1,int op2);

void main()
{  stack s;
    char x;
    int op1,op2,val;
    init(&s);
   char infix[30],postfix[30],m[30],i=0;
   printf("Enter Infix Exp : ");
   scanf("%s",infix);
   infix_to_postfix(infix,postfix);
   printf("Postfix Expression Is : %s\n",postfix);
	
   printf("Expression Going For Evaluation Is : %s\n",postfix);
    while((x=postfix[i++])!='\0')
    {
        if(isdigit(x))
            push(&s,x-48);        
        else
        {
            op2=pop(&s);
            op1=pop(&s);
            val=evaluate(x,op1,op2);
            push(&s,val);
        }
    }
   
    val=pop(&s);
    printf("Value of expression : %d",val);
 
   
}

void infix_to_postfix(char infix[],char postfix[])
{
   stack s;
   char x, token;
   int i,j;
   init(&s);
   j=0;
for(i=0;infix[i]!='\0';i++)
 {
    token=infix[i];
    if(isalnum(token))
      postfix[j++]=token;
    else if(token=='(')
      push(&s,'(');
    else if(token==')')
    while((x=pop(&s)!='('))
      postfix[j++]=x;
    else
     {  while(precedence(token)<=precedence(top(&s)) && !empty(&s))
	  {  x=pop(&s);
	     postfix[j++]=x;
	  } push(&s,token);
     }
}

while(!empty(&s))
{  x=pop(&s);
   postfix[j++]=x;
}
postfix[j]='\0';
}

int precedence(char x)
{  if(x=='(')
   return (0);
   if(x=='+' || x=='-')
   return(1);
   if(x=='*' || x=='/' || x=='%')
   return(2);
   else
   return(3);
}

void init(stack*s)
{
	s->top=-1;
}

int empty(stack*s)
{
	if(s->top==-1)
	  return(1);
	else
	  return(0);
}

void push(stack*s,int x)
{
	s->top=s->top+1;
	s->data[s->top]=x;
}

int pop(stack*s)
{
	int x;
	x=s->data[s->top];
	s->top=s->top-1;
        return(x);
}

int top(stack*p)
{  return(p->data[p->top]);  }

int evaluate(char x,int op1,int op2)
{
    if(x=='+')
        return(op1+op2);
    if(x=='-')
        return(op1-op2);
    if(x=='*')
        return(op1*op2);
    if(x=='/')
        return(op1/op2);
    if(x=='%')
        return(op1%op2);
}

*********************************OUTPUT********************************

MyWorkSpace@ubuntu:~/Desktop$ gcc merge.c
MyWorkSpace@ubuntu:~/Desktop$ ./a.out
Enter Infix Exp : 5+6*9/4-7
Postfix Expression Is : 569*4/+7-
Expression Going For Evaluation Is : 569*4/+7-
Value of expression=11

*********************************OUTPUT********************************
